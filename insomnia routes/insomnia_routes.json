{"_type":"export","__export_format":4,"__export_date":"2024-06-20T23:41:31.969Z","__export_source":"insomnia.desktop.app:v2023.2.0","resources":[{"_id":"req_f2d964b8c66b44018ec85e7358410fe5","parentId":"fld_593e1d9684ad44ae8ed90f9d40253ee5","modified":1718925572320,"created":1718842917273,"url":"http://localhost:3000","name":"Fetching API","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1718838304943.6719,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_593e1d9684ad44ae8ed90f9d40253ee5","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718925563667,"created":1718925563667,"name":"API","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1718925563667,"_type":"request_group"},{"_id":"fld_b6ec71e14069443e97e2ebec8739aee7","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1718926838673,"created":1716511733893,"name":"Rick and Morty","description":"","environment":{"bearerToken":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2Njc0YjIzYTcyY2ZhZWVhMTQ2NDkyYWQiLCJ1c2VyTWFpbCI6ImFsbGFuIiwiaWF0IjoxNzE4OTI0MDYyLCJleHAiOjE3MTg5Mjc2NjJ9.cCtVbQtRsEkxPHkD1hxL3W4pe4TM2uTJVVuGG8FmuYQ"},"environmentPropertyOrder":{"&":["bearerToken"]},"metaSortKey":-1716511733893,"_type":"request_group"},{"_id":"wrk_3cb044e4a04640cba947efeef7ae4631","parentId":null,"modified":1679014170446,"created":1679014170446,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_50293a20d43e4ebd8737817d6cb00f50","parentId":"fld_088c54900d324dbdbca09e436b9a5bab","modified":1718925529503,"created":1718925494566,"url":"http://localhost:3000/episode/4","name":"Forcing Authentication Error","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1718925494566,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_088c54900d324dbdbca09e436b9a5bab","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718925479704,"created":1718925460691,"name":"authentication","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1718838302191.3125,"_type":"request_group"},{"_id":"req_cd5ef8e36b33485f95666e9cfa0b0318","parentId":"fld_088c54900d324dbdbca09e436b9a5bab","modified":1718925552273,"created":1718838327880,"url":"http://localhost:3000/auth/login","name":"Authentication Login","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"username\": \"allan\",\n\t\"password\": \"abc123\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1718925494516,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_48d94da3774b4b8f9eab1484c0c84da6","parentId":"fld_2cc0bf08436b4a13bc5823cc881a9a67","modified":1718844880278,"created":1718843179902,"url":"http://localhost:3000/users/","name":"CREATE users","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"username\": \"allan\",\n\t\"password\": \"abc123\",\n\t\"age\": 20,\n\t\"email\": \"allanogw@gmail.com\" \n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1718843179902,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_2cc0bf08436b4a13bc5823cc881a9a67","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718844850553,"created":1718843129109,"name":"users","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1718838291181.875,"_type":"request_group"},{"_id":"req_efd9ffc488a549cdb8d7d7358f8b3b44","parentId":"fld_2cc0bf08436b4a13bc5823cc881a9a67","modified":1718845378855,"created":1718843375871,"url":"http://localhost:3000/users/","name":"READ users","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1718843031368,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2e3b1b0c28614398b64c143f2ec7b5c3","parentId":"fld_2cc0bf08436b4a13bc5823cc881a9a67","modified":1718844844714,"created":1718843151551,"url":"http://localhost:3000/users/allan","name":"READ users/id","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1718843031318,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8e4063e4374046ca8bb2b8964465bc14","parentId":"fld_ae68f2fbbbd84305a2c8619dc9984a61","modified":1718922511451,"created":1718922385638,"url":"http://localhost:3000/error","name":"READ error","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1718922472391.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_ae68f2fbbbd84305a2c8619dc9984a61","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718922384118,"created":1718922379690,"name":"error","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1718838280172.4375,"_type":"request_group"},{"_id":"req_cf897270678d4385af09e38d68f1fb9a","parentId":"fld_ae68f2fbbbd84305a2c8619dc9984a61","modified":1718922872877,"created":1718922501309,"url":"http://localhost:3000/character/4","name":"Forcing error","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"id\" : \"test\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1718922472341.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_883da0816482403ca9aa4d7cc7cdc6fa","parentId":"fld_a0a51b236ebb4c81b71e5eeba2172e81","modified":1718844492232,"created":1718327288613,"url":"http://localhost:3000/character/","name":"READ character","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","disabled":false,"prefix":""},"metaSortKey":-1718327288613,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_a0a51b236ebb4c81b71e5eeba2172e81","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718838269163,"created":1718838269163,"name":"character","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1718838269163,"_type":"request_group"},{"_id":"req_c4c69190817746bb96f58d7562173136","parentId":"fld_a0a51b236ebb4c81b71e5eeba2172e81","modified":1718923540835,"created":1718838399252,"url":"http://localhost:3000/character/6","name":"READ character/id","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1715904589058.5625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_bf198e1c6f7b44fbad63accd6ef157ac","parentId":"fld_a0a51b236ebb4c81b71e5eeba2172e81","modified":1718844515845,"created":1718838418173,"url":"http://localhost:3000/character/","name":"CREATE character","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"id\": 827,\n\t\"name\": \"Allan\",\n\t\"status\": \"Alive\",\n\t\"species\": \"Human\",\n\t\"gender\": \"Male\",\n\t\"image\": \"https://rickandmortyapi.com/api/character/avatar/1.jpeg\",\n\t\"location\": \"Earth (Replacement Dimension)\",\n\t\"origin\": \"Earth (Replacement Dimension)\",\n\t\"type\": \"\"\n}"},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1714693239281.3438,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_4dcb0d951cbf4bbe8069042ee74bf645","parentId":"fld_a0a51b236ebb4c81b71e5eeba2172e81","modified":1718921685111,"created":1718838624732,"url":"http://localhost:3000/character/827","name":"UPDATE character","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"status\": \"Dead\",\n\t\"location\": \"Earth (C-137)\"\n}"},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1714087564392.7344,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d2eeefbd4e7b4c768efa41a831b74adc","parentId":"fld_a0a51b236ebb4c81b71e5eeba2172e81","modified":1718844517896,"created":1718838694600,"url":"http://localhost:3000/character/827","name":"DELETE character","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1713784726948.4297,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5734f42eb4144f8dbc1bf0bcadbef4c3","parentId":"fld_9100084574c7423d8cdb351117f1d378","modified":1718844522825,"created":1718838725310,"url":"http://localhost:3000/episode/","name":"READ episode","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1718327288613,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_9100084574c7423d8cdb351117f1d378","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718838725286,"created":1718838725286,"name":"episode","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1718838269150.5,"_type":"request_group"},{"_id":"req_bf17daf8bf9d4b04a64eb49a17e98283","parentId":"fld_9100084574c7423d8cdb351117f1d378","modified":1718844524600,"created":1718838725333,"url":"http://localhost:3000/episode/4","name":"READ episode/id","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1715904589058.5625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_627d131bce774f45bd2222a3902bd857","parentId":"fld_9100084574c7423d8cdb351117f1d378","modified":1718844526383,"created":1718838725353,"url":"http://localhost:3000/episode/","name":"CREATE episode","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"id\": 52,\n\t\"characters\": [\n\t\t\"667227750a8655d7ace67877\",\n\t\t\"667227750a8655d7ace67879\"\n\t],\n\t\"name\": \"Solaricks\",\n\t\"air_date\": \"September 4, 2022\",\n\t\"episode\": \"S06E01\"\n}"},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1714693239281.3438,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7e1d7be64f58411a980ed295973ffb56","parentId":"fld_9100084574c7423d8cdb351117f1d378","modified":1718844527881,"created":1718838725376,"url":"http://localhost:3000/episode/52","name":"UPDATE episode","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"name\": \"Solaricks!!\",\n\t\"air_date\": \"September 25, 2022\"\n}"},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1714087564392.7344,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5e0363db84a241949d492bac9f0ea9ac","parentId":"fld_9100084574c7423d8cdb351117f1d378","modified":1718844531095,"created":1718838725399,"url":"http://localhost:3000/episode/52","name":"DELETE episode","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1713784726948.4297,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b9d91b5be6204e20a013b0be37d838bc","parentId":"fld_0e26b464ac4e4dadbd60258e71d6cb8f","modified":1718844533718,"created":1718839172231,"url":"http://localhost:3000/location/","name":"READ location","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1718327288613,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_0e26b464ac4e4dadbd60258e71d6cb8f","parentId":"fld_b6ec71e14069443e97e2ebec8739aee7","modified":1718839172219,"created":1718839172219,"name":"location","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1717675001521.75,"_type":"request_group"},{"_id":"req_f733032edfa241328805b61654316560","parentId":"fld_0e26b464ac4e4dadbd60258e71d6cb8f","modified":1718844535477,"created":1718839172253,"url":"http://localhost:3000/location/7","name":"READ location/id","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1715904589058.5625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e80b5a9e54be4c77acc906aecf1523c8","parentId":"fld_0e26b464ac4e4dadbd60258e71d6cb8f","modified":1718844537650,"created":1718839172275,"url":"http://localhost:3000/location/","name":"CREATE location","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"id\": 127,\n\t\"dimension\": \"Dimension C-137\",\n\t\"name\": \"Pluto (C-137)\",\n\t\"type\": \"Planet\"\n}"},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1714693239281.3438,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c6dd26c02a26438783648524e93c83a6","parentId":"fld_0e26b464ac4e4dadbd60258e71d6cb8f","modified":1718844539439,"created":1718839172296,"url":"http://localhost:3000/location/127","name":"UPDATE location","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"type\": \"NOT a Planet\"\n}"},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""},{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1714087564392.7344,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a8a5bc1fe9874e3c8630eaa9fb310345","parentId":"fld_0e26b464ac4e4dadbd60258e71d6cb8f","modified":1718844541385,"created":1718839172318,"url":"http://localhost:3000/location/127","name":"DELETE location","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"id":"pair_51859025da9649fa92d133a7368114e3","name":"","value":"","description":""}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}"},"metaSortKey":-1713784726948.4297,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_e902382462a2a67c1ab5e9b145177162290f47ed","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1713314349492,"created":1679014170496,"name":"Base Environment","data":{},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1679014170496,"_type":"environment"},{"_id":"jar_e902382462a2a67c1ab5e9b145177162290f47ed","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1717711347623,"created":1679014170499,"name":"Default Jar","cookies":[{"key":"__Host-device_id","value":"AQBcn3I8s-hL62gP1D2Ejn3PB4nyDbL6Khb4Ccb9fLaDjs07RgGhDBcPdOJsb9pTafKlTq_Ysd3FK30XvX4GG3WVh6zRysCus6I","maxAge":2147483647,"domain":"localhost","path":"/","secure":true,"httpOnly":true,"extensions":["Version=1","SameSite=Lax"],"hostOnly":true,"creation":"2024-06-06T22:02:27.620Z","lastAccessed":"2024-06-06T22:02:27.620Z","id":"4917190164997529"},{"key":"__Host-sp_csrf_sid","value":"d4ea6047b97d56dfa5851aa8571f09a890bd80b2c9803cb11b18638375a320e7","maxAge":3600,"domain":"localhost","path":"/","secure":true,"httpOnly":true,"extensions":["SameSite=Lax"],"hostOnly":true,"creation":"2024-06-06T22:02:27.622Z","lastAccessed":"2024-06-06T22:02:27.622Z","id":"5586494039556342"}],"_type":"cookie_jar"},{"_id":"spc_1a73d956b9044c23945c713a1e525c59","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1718921222294,"created":1713728103118,"fileName":"New Document","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_73362809df4b40d2a210290e1ce48fd5","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1679014170507,"created":1679014170507,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"uts_75eb2cffd8fc463d965dd412e65e1a85","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1679014170507,"created":1679014170507,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"uts_8b68d663a4d24191849d684c396bee45","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1679014170507,"created":1679014170507,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"uts_a55ed58f89db4b9cae6323175477f1c1","parentId":"wrk_3cb044e4a04640cba947efeef7ae4631","modified":1679014170507,"created":1679014170507,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_0de4da1204aa4181b70928495292ff0f","parentId":"env_e902382462a2a67c1ab5e9b145177162290f47ed","modified":1718845704708,"created":1718845704708,"name":"New Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1718845704708,"_type":"environment"}]}